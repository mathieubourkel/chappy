stages:
  - publish
  - test
  - deploy

workflow:
  rules: 
    - if: $CI_COMMIT_BRANCH == "main"

publish:
  image: docker:stable
  stage: publish
  services: 
    - docker:dind
  before_script:
    - docker login $CI_REGISTRY -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" 
  script:
    - docker build --target=$TAG_PROD -t $CI_REGISTRY_IMAGE:$TAG_PROD --build-arg "VITE_PROTOCOL=https" --build-arg "VITE_BACK_PORT=3000" --build-arg "VITE_BACK_HOST=$PROD_URL_ALIAS"  --build-arg "VITE_WEB_SOCKET_PORT=3013 --build-arg "VITE_WEB_SOCKET_HOST=$PROD_URL_ALIAS .
    - docker push $CI_REGISTRY_IMAGE:$TAG_PROD
include:
  - template: Jobs/SAST.gitlab-ci.yml
  - template: Security/Container-Scanning.gitlab-ci.yml

container_scanning:
  variables:
    CS_IMAGE: registry.alt-tools.tech/chappy/chappy-front:production

deploy:
  image: alpine:latest
  stage: deploy
  script:
    - chmod og= $ID_RSA
    - apk update && apk add openssh-client
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $AWS_USER@$AWS_DNS "docker login $CI_REGISTRY -u '$CI_REGISTRY_USER' -p '$CI_REGISTRY_PASSWORD'"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $AWS_USER@$AWS_DNS "docker pull $CI_REGISTRY_IMAGE:$TAG_PROD"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $AWS_USER@$AWS_DNS "docker container rm -f front_chappy_prod || true"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $AWS_USER@$AWS_DNS "docker-compose up -d"